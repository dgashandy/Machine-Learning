{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"TextProcessing-M Daffa Gashandy","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyON62U7VplKJhuoUoJoThva"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","metadata":{"id":"jxT8Ux8D5vmD"},"source":["TextProcessing & Feature Representation"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"OYGSaZWRog7R","executionInfo":{"status":"ok","timestamp":1646389128651,"user_tz":-420,"elapsed":34229,"user":{"displayName":"M Daffa Gashandy","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh7g2wCDoJ_7gn_JKav-6ZXlei2Tjvfv2y9NFCe=s64","userId":"08879571958020624525"}},"outputId":"5eebb58b-9739-47d4-e9a4-ee2674b7b07d"},"source":["#Mount Ke GDrive\n","from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"markdown","metadata":{"id":"TliqbuVM1UL0"},"source":["Text Processing & Feature Representation : Vectorization"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":635},"id":"CDBOE4GCow-C","executionInfo":{"status":"ok","timestamp":1646389170226,"user_tz":-420,"elapsed":6820,"user":{"displayName":"M Daffa Gashandy","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh7g2wCDoJ_7gn_JKav-6ZXlei2Tjvfv2y9NFCe=s64","userId":"08879571958020624525"}},"outputId":"bf083291-0700-4166-9f1b-a19a2c028b36"},"source":["#import library\n","import nltk\n","nltk.download('stopwords')\n","nltk.download('punkt')\n","from nltk.tokenize import sent_tokenize,word_tokenize\n","from nltk.corpus import stopwords\n","import string\n","import re\n","import matplotlib.pyplot as plt\n","from nltk.stem import PorterStemmer\n","from sklearn.feature_extraction.text import CountVectorizer\n","\n","#Tokenization : Part 2\n","def seperate(text):\n","  #Remove punctuation\n","  text = re.sub(r\"\\d+\", \"\", text)\n","  text = text.translate(str.maketrans(\"\",\"\", string.punctuation))\n","  #Remove Blank Space\n","  text = text.strip()\n","  text = text.lstrip()\n","  return text\n","\n","#Import Text Document\n","def preprocess(filename):\n","    file = open(filename,\"r\")\n","    text = file.read()\n","\n","    #Case Folding : Lower Case \n","    text = text.lower()\n","\n","    #Tokenization : Sentence\n","    text = nltk.tokenize.sent_tokenize(text)\n","\n","    #Filtering : Stopword\n","    length = len(text)\n","    token = []\n","    tokens = ''\n","    for i in range(length):\n","        text[i] = seperate(text[i])\n","    for i in range(length):\n","        token = token + text[i].split()\n","    listStopword = set(stopwords.words('english'))\n","    removed = []\n","    for t in token:\n","        if t not in listStopword:\n","            removed.append(t)\n","\n","    # Stemming\n","    ps = PorterStemmer() \n","    for k in removed: \n","        tokens = tokens +' '+ ps.stem(k)\n","    return tokens\n","\n","d1 = preprocess(\"/content/drive/My Drive/TextProcessing/abstract1.txt\")\n","d2 = preprocess(\"/content/drive/My Drive/TextProcessing/abstract2.txt\")\n","d3 = preprocess(\"/content/drive/My Drive/TextProcessing/abstract3.txt\")\n","d4 = preprocess(\"/content/drive/My Drive/TextProcessing/abstract4.txt\")\n","d5 = preprocess(\"/content/drive/My Drive/TextProcessing/abstract5.txt\")\n","d6 = preprocess(\"/content/drive/My Drive/TextProcessing/abstract6.txt\")\n","d7 = preprocess(\"/content/drive/My Drive/TextProcessing/abstract7.txt\")\n","d8 = preprocess(\"/content/drive/My Drive/TextProcessing/abstract8.txt\")\n","d9 = preprocess(\"/content/drive/My Drive/TextProcessing/abstract9.txt\")\n","d10 = preprocess(\"/content/drive/My Drive/TextProcessing/abstract10.txt\")\n","\n","#Feature Representation : Vectorizer\n","vectorizer = CountVectorizer()\n","X = vectorizer.fit_transform([d1,d2,d3,d4,d5,d6,d7,d8,d9,d10])\n","feature_names_c = vectorizer.get_feature_names()\n","result_c = X.toarray()\n","print()\n","print(feature_names_c)\n","print(result_c)\n","print()\n","kemunculan = nltk.FreqDist(feature_names_c)\n","kemunculan.plot(40,cumulative=False)\n","plt.show()\n"],"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["[nltk_data] Downloading package stopwords to /root/nltk_data...\n","[nltk_data]   Unzipping corpora/stopwords.zip.\n","[nltk_data] Downloading package punkt to /root/nltk_data...\n","[nltk_data]   Unzipping tokenizers/punkt.zip.\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function get_feature_names is deprecated; get_feature_names is deprecated in 1.0 and will be removed in 1.2. Please use get_feature_names_out instead.\n","  warnings.warn(msg, category=FutureWarning)\n"]},{"output_type":"stream","name":"stdout","text":["\n","['abil', 'abl', 'acceler', 'accommod', 'accord', 'accuraci', 'achiev', 'aco', 'activ', 'ad', 'adam', 'adopt', 'affect', 'algorithm', 'algoritm', 'also', 'altern', 'alway', 'amount', 'analysi', 'ann', 'api', 'appear', 'appli', 'applic', 'approach', 'apriori', 'aris', 'artifici', 'aspect', 'assess', 'assist', 'associ', 'astar', 'attribut', 'attributes', 'avail', 'averag', 'bantul', 'base', 'basi', 'basic', 'batter', 'bay', 'becom', 'belief', 'best', 'better', 'betterthan', 'biggest', 'blbp', 'blink', 'boltzmann', 'build', 'built', 'calcul', 'call', 'carri', 'case', 'categori', 'cemeteri', 'certain', 'championship', 'characterist', 'choos', 'chromosom', 'class', 'classif', 'classifi', 'codec', 'coeffici', 'collisionfre', 'combin', 'come', 'committ', 'commun', 'compar', 'complex', 'compon', 'compos', 'condit', 'conduct', 'confid', 'confus', 'connect', 'consider', 'consist', 'constraint', 'contain', 'continu', 'converg', 'convers', 'covid', 'criteria', 'current', 'daili', 'dakota', 'data', 'databas', 'date', 'dbn', 'dbnadam', 'dbnsgd', 'death', 'decis', 'decreas', 'defin', 'descent', 'describ', 'destinationthi', 'determin', 'develop', 'differ', 'distanc', 'distribut', 'divid', 'done', 'dynam', 'eat', 'econom', 'empir', 'empower', 'end', 'enforc', 'environ', 'environment', 'environt', 'evalu', 'event', 'ever', 'everi', 'examin', 'exchang', 'expect', 'experi', 'explain', 'explan', 'extend', 'extract', 'facil', 'fairli', 'famili', 'famou', 'featur', 'final', 'find', 'fit', 'fitri', 'food', 'forecast', 'form', 'formul', 'four', 'fscore', 'function', 'funer', 'furnitur', 'fuzzi', 'gather', 'gener', 'genet', 'get', 'give', 'given', 'good', 'googl', 'govern', 'grade', 'gradient', 'happen', 'hard', 'help', 'highest', 'hit', 'hot', 'hpck', 'human', 'idr', 'idul', 'ie', 'implement', 'import', 'improv', 'incom', 'increas', 'indic', 'indonesian', 'influenc', 'inform', 'initi', 'interfac', 'introduc', 'ip', 'jrlewi', 'know', 'known', 'land', 'last', 'learn', 'length', 'level', 'limit', 'lin', 'linear', 'linier', 'linphon', 'local', 'long', 'lot', 'lubuklinggau', 'mach', 'machin', 'macth', 'made', 'mae', 'maintain', 'make', 'manag', 'mani', 'mape', 'match', 'maxim', 'mean', 'measur', 'media', 'method', 'methodth', 'microsip', 'minconf', 'mine', 'minim', 'minimum', 'miningin', 'minsup', 'mintempsup', 'mo', 'model', 'motion', 'movesdinam', 'must', 'naiv', 'name', 'nativ', 'need', 'neg', 'network', 'neural', 'new', 'ngram', 'nine', 'normal', 'number', 'object', 'obstacl', 'obtain', 'offer', 'often', 'one', 'optim', 'outperform', 'overcom', 'pair', 'pandem', 'paramet', 'partai', 'partit', 'patch', 'path', 'pathplan', 'pattern', 'pencak', 'peopl', 'perform', 'phone', 'pimda', 'place', 'plan', 'point', 'polici', 'poor', 'popul', 'portgo', 'posit', 'poverti', 'precis', 'predict', 'presenc', 'problem', 'problemsdeep', 'process', 'produc', 'program', 'proper', 'propos', 'provid', 'psnr', 'pt', 'public', 'purpos', 'qo', 'qualiti', 'question', 'questionnair', 'quickli', 'ramadan', 'rate', 'rbm', 'reach', 'real', 'recal', 'receiv', 'recommend', 'regress', 'regul', 'repres', 'represent', 'research', 'resolv', 'restaur', 'restrain', 'restrict', 'resukt', 'result', 'righthand', 'rmse', 'robot', 'role', 'rule', 'safe', 'sampl', 'satisfi', 'schedul', 'search', 'second', 'sector', 'seen', 'select', 'sentiment', 'sequenc', 'server', 'sever', 'sgd', 'shortest', 'show', 'side', 'silat', 'simpl', 'simul', 'sinusoidalon', 'slope', 'social', 'soft', 'softphon', 'solut', 'solv', 'sortest', 'specifi', 'spread', 'stabil', 'stack', 'standard', 'start', 'state', 'staticth', 'still', 'stochast', 'strategi', 'structur', 'studi', 'success', 'suci', 'sum', 'support', 'system', 'tak', 'target', 'technolog', 'tempor', 'term', 'test', 'text', 'tfidf', 'therefor', 'thing', 'think', 'thirdtravel', 'three', 'time', 'timerequir', 'topic', 'topsi', 'total', 'toward', 'town', 'transact', 'travel', 'trigram', 'tweet', 'twitter', 'two', 'type', 'unanim', 'uncertainti', 'underdevelop', 'usd', 'use', 'user', 'usual', 'valu', 'variabl', 'video', 'viru', 'vp', 'want', 'warm', 'weight', 'wherea', 'whether', 'wittre', 'world', 'worst', 'xlite', 'year', 'zoiper']\n","[[0 0 0 ... 0 0 0]\n"," [1 3 1 ... 0 0 0]\n"," [1 0 0 ... 0 0 0]\n"," ...\n"," [0 0 0 ... 0 0 0]\n"," [0 0 0 ... 0 0 0]\n"," [0 0 0 ... 0 3 0]]\n","\n"]},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"XfUXVbH31K3R"},"source":["#Feature Representation : Bags of Word (BoW)"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":292},"id":"Hvx_Lwxj3shs","executionInfo":{"status":"ok","timestamp":1646389184518,"user_tz":-420,"elapsed":883,"user":{"displayName":"M Daffa Gashandy","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh7g2wCDoJ_7gn_JKav-6ZXlei2Tjvfv2y9NFCe=s64","userId":"08879571958020624525"}},"outputId":"cac58aec-af1b-446e-9ee6-c743980020d7"},"source":["#Feature Representation : Bags of Word (BoW)\n","import pandas as pd\n","import numpy as np\n","import collections\n","\n","print(feature_names_c)\n","print()\n","def calculateBOW(feature_names_c,d1):\n","  tf_diz = dict.fromkeys(feature_names_c,0)\n","  for word in d1:\n","      tf_diz[word]=d1.count(word)\n","  return tf_diz\n","\n","bow1 = calculateBOW(feature_names_c,d1)\n","bow2 = calculateBOW(feature_names_c,d2)\n","bow3 = calculateBOW(feature_names_c,d3)\n","bow4 = calculateBOW(feature_names_c,d4)\n","bow5 = calculateBOW(feature_names_c,d5)\n","bow6 = calculateBOW(feature_names_c,d6)\n","bow7 = calculateBOW(feature_names_c,d7)\n","bow8 = calculateBOW(feature_names_c,d8)\n","bow9 = calculateBOW(feature_names_c,d9)\n","bow10 = calculateBOW(feature_names_c,d10)\n","df_bow = pd.DataFrame([bow1,bow2,bow3,bow4,bow5,bow6,bow7,bow8,bow9,bow10])\n","df_bow.head()"],"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["['abil', 'abl', 'acceler', 'accommod', 'accord', 'accuraci', 'achiev', 'aco', 'activ', 'ad', 'adam', 'adopt', 'affect', 'algorithm', 'algoritm', 'also', 'altern', 'alway', 'amount', 'analysi', 'ann', 'api', 'appear', 'appli', 'applic', 'approach', 'apriori', 'aris', 'artifici', 'aspect', 'assess', 'assist', 'associ', 'astar', 'attribut', 'attributes', 'avail', 'averag', 'bantul', 'base', 'basi', 'basic', 'batter', 'bay', 'becom', 'belief', 'best', 'better', 'betterthan', 'biggest', 'blbp', 'blink', 'boltzmann', 'build', 'built', 'calcul', 'call', 'carri', 'case', 'categori', 'cemeteri', 'certain', 'championship', 'characterist', 'choos', 'chromosom', 'class', 'classif', 'classifi', 'codec', 'coeffici', 'collisionfre', 'combin', 'come', 'committ', 'commun', 'compar', 'complex', 'compon', 'compos', 'condit', 'conduct', 'confid', 'confus', 'connect', 'consider', 'consist', 'constraint', 'contain', 'continu', 'converg', 'convers', 'covid', 'criteria', 'current', 'daili', 'dakota', 'data', 'databas', 'date', 'dbn', 'dbnadam', 'dbnsgd', 'death', 'decis', 'decreas', 'defin', 'descent', 'describ', 'destinationthi', 'determin', 'develop', 'differ', 'distanc', 'distribut', 'divid', 'done', 'dynam', 'eat', 'econom', 'empir', 'empower', 'end', 'enforc', 'environ', 'environment', 'environt', 'evalu', 'event', 'ever', 'everi', 'examin', 'exchang', 'expect', 'experi', 'explain', 'explan', 'extend', 'extract', 'facil', 'fairli', 'famili', 'famou', 'featur', 'final', 'find', 'fit', 'fitri', 'food', 'forecast', 'form', 'formul', 'four', 'fscore', 'function', 'funer', 'furnitur', 'fuzzi', 'gather', 'gener', 'genet', 'get', 'give', 'given', 'good', 'googl', 'govern', 'grade', 'gradient', 'happen', 'hard', 'help', 'highest', 'hit', 'hot', 'hpck', 'human', 'idr', 'idul', 'ie', 'implement', 'import', 'improv', 'incom', 'increas', 'indic', 'indonesian', 'influenc', 'inform', 'initi', 'interfac', 'introduc', 'ip', 'jrlewi', 'know', 'known', 'land', 'last', 'learn', 'length', 'level', 'limit', 'lin', 'linear', 'linier', 'linphon', 'local', 'long', 'lot', 'lubuklinggau', 'mach', 'machin', 'macth', 'made', 'mae', 'maintain', 'make', 'manag', 'mani', 'mape', 'match', 'maxim', 'mean', 'measur', 'media', 'method', 'methodth', 'microsip', 'minconf', 'mine', 'minim', 'minimum', 'miningin', 'minsup', 'mintempsup', 'mo', 'model', 'motion', 'movesdinam', 'must', 'naiv', 'name', 'nativ', 'need', 'neg', 'network', 'neural', 'new', 'ngram', 'nine', 'normal', 'number', 'object', 'obstacl', 'obtain', 'offer', 'often', 'one', 'optim', 'outperform', 'overcom', 'pair', 'pandem', 'paramet', 'partai', 'partit', 'patch', 'path', 'pathplan', 'pattern', 'pencak', 'peopl', 'perform', 'phone', 'pimda', 'place', 'plan', 'point', 'polici', 'poor', 'popul', 'portgo', 'posit', 'poverti', 'precis', 'predict', 'presenc', 'problem', 'problemsdeep', 'process', 'produc', 'program', 'proper', 'propos', 'provid', 'psnr', 'pt', 'public', 'purpos', 'qo', 'qualiti', 'question', 'questionnair', 'quickli', 'ramadan', 'rate', 'rbm', 'reach', 'real', 'recal', 'receiv', 'recommend', 'regress', 'regul', 'repres', 'represent', 'research', 'resolv', 'restaur', 'restrain', 'restrict', 'resukt', 'result', 'righthand', 'rmse', 'robot', 'role', 'rule', 'safe', 'sampl', 'satisfi', 'schedul', 'search', 'second', 'sector', 'seen', 'select', 'sentiment', 'sequenc', 'server', 'sever', 'sgd', 'shortest', 'show', 'side', 'silat', 'simpl', 'simul', 'sinusoidalon', 'slope', 'social', 'soft', 'softphon', 'solut', 'solv', 'sortest', 'specifi', 'spread', 'stabil', 'stack', 'standard', 'start', 'state', 'staticth', 'still', 'stochast', 'strategi', 'structur', 'studi', 'success', 'suci', 'sum', 'support', 'system', 'tak', 'target', 'technolog', 'tempor', 'term', 'test', 'text', 'tfidf', 'therefor', 'thing', 'think', 'thirdtravel', 'three', 'time', 'timerequir', 'topic', 'topsi', 'total', 'toward', 'town', 'transact', 'travel', 'trigram', 'tweet', 'twitter', 'two', 'type', 'unanim', 'uncertainti', 'underdevelop', 'usd', 'use', 'user', 'usual', 'valu', 'variabl', 'video', 'viru', 'vp', 'want', 'warm', 'weight', 'wherea', 'whether', 'wittre', 'world', 'worst', 'xlite', 'year', 'zoiper']\n","\n"]},{"output_type":"execute_result","data":{"text/html":["\n","  <div id=\"df-3c37030e-22b0-4ad5-9cc2-0c79220184d9\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>abil</th>\n","      <th>abl</th>\n","      <th>acceler</th>\n","      <th>accommod</th>\n","      <th>accord</th>\n","      <th>accuraci</th>\n","      <th>achiev</th>\n","      <th>aco</th>\n","      <th>activ</th>\n","      <th>ad</th>\n","      <th>...</th>\n","      <th>v</th>\n","      <th>b</th>\n","      <th>à</th>\n","      <th>z</th>\n","      <th>q</th>\n","      <th>y</th>\n","      <th>“</th>\n","      <th>”</th>\n","      <th>j</th>\n","      <th>’</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>3</td>\n","      <td>3</td>\n","      <td>1.0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>8</td>\n","      <td>16</td>\n","      <td>NaN</td>\n","      <td>1.0</td>\n","      <td>2.0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>14</td>\n","      <td>13</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>9</td>\n","      <td>11</td>\n","      <td>NaN</td>\n","      <td>2.0</td>\n","      <td>5.0</td>\n","      <td>NaN</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>4</td>\n","      <td>4</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>6.0</td>\n","      <td>2.0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>1.0</td>\n","      <td>NaN</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 455 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3c37030e-22b0-4ad5-9cc2-0c79220184d9')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-3c37030e-22b0-4ad5-9cc2-0c79220184d9 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-3c37030e-22b0-4ad5-9cc2-0c79220184d9');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "],"text/plain":["   abil  abl  acceler  accommod  accord  accuraci  achiev  aco  activ  ad  \\\n","0     0    0        0         0       0         0       0    0      0   0   \n","1     0    0        0         0       0         0       0    0      0   0   \n","2     0    0        0         0       0         0       0    0      0   0   \n","3     0    0        0         0       0         0       0    0      0   0   \n","4     0    0        0         0       0         0       0    0      0   0   \n","\n","   ...   v   b    à    z    q    y    “    ”    j   ’  \n","0  ...   3   3  1.0  NaN  NaN  NaN  NaN  NaN  NaN NaN  \n","1  ...   8  16  NaN  1.0  2.0  NaN  NaN  NaN  NaN NaN  \n","2  ...  14  13  NaN  NaN  1.0  1.0  NaN  NaN  NaN NaN  \n","3  ...   9  11  NaN  2.0  5.0  NaN  1.0  1.0  NaN NaN  \n","4  ...   4   4  NaN  NaN  6.0  2.0  NaN  NaN  1.0 NaN  \n","\n","[5 rows x 455 columns]"]},"metadata":{},"execution_count":3}]},{"cell_type":"markdown","metadata":{"id":"VfaRIyk-0-ER"},"source":["Calculating Similarity : Jaccard Score"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Py1nQ8WWHAwU","executionInfo":{"status":"ok","timestamp":1638193334936,"user_tz":-420,"elapsed":704,"user":{"displayName":"M Daffa Gashandy","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh7g2wCDoJ_7gn_JKav-6ZXlei2Tjvfv2y9NFCe=s64","userId":"08879571958020624525"}},"outputId":"ced518ae-00ab-4ed4-8ad2-449ad6e42f79"},"source":["from sklearn.metrics import jaccard_score\n","\n","vectorizer = CountVectorizer()\n","X = vectorizer.fit_transform([d1,d2,d3,d4,d5,d6,d7,d8,d9,d10])\n","feature_names_c = vectorizer.get_feature_names()\n","result_c = X.toarray()\n","length = len(feature_names_c)\n","print()\n","#comparison between abstract\n","\n","# 1 to 10\n","print(\"Similarity Between 1 and 1 = \",jaccard_score(result_c[0],result_c[0],average=\"weighted\")*100)\n","print(\"Similarity Between 1 and 2 = \",jaccard_score(result_c[0],result_c[1],average=\"weighted\")*100)\n","print(\"Similarity Between 1 and 3 = \",jaccard_score(result_c[0],result_c[2],average=\"weighted\")*100)\n","print(\"Similarity Between 1 and 4 = \",jaccard_score(result_c[0],result_c[3],average=\"weighted\")*100)\n","print(\"Similarity Between 1 and 5 = \",jaccard_score(result_c[0],result_c[4],average=\"weighted\")*100)\n","print(\"Similarity Between 1 and 6 = \",jaccard_score(result_c[0],result_c[5],average=\"weighted\")*100)\n","print(\"Similarity Between 1 and 7 = \",jaccard_score(result_c[0],result_c[6],average=\"weighted\")*100)\n","print(\"Similarity Between 1 and 8 = \",jaccard_score(result_c[0],result_c[7],average=\"weighted\")*100)\n","print(\"Similarity Between 1 and 9 = \",jaccard_score(result_c[0],result_c[8],average=\"weighted\")*100)\n","print(\"Similarity Between 1 and 10 = \",jaccard_score(result_c[0],result_c[9],average=\"weighted\")*100)\n","print()\n","# 2 to 10\n","print(\"Similarity Between 2 and 1 = \",jaccard_score(result_c[1],result_c[0],average=\"weighted\")*100)\n","print(\"Similarity Between 2 and 2 = \",jaccard_score(result_c[1],result_c[1],average=\"weighted\")*100)\n","print(\"Similarity Between 2 and 3 = \",jaccard_score(result_c[1],result_c[2],average=\"weighted\")*100)\n","print(\"Similarity Between 2 and 4 = \",jaccard_score(result_c[1],result_c[3],average=\"weighted\")*100)\n","print(\"Similarity Between 2 and 5 = \",jaccard_score(result_c[1],result_c[4],average=\"weighted\")*100)\n","print(\"Similarity Between 2 and 6 = \",jaccard_score(result_c[1],result_c[5],average=\"weighted\")*100)\n","print(\"Similarity Between 2 and 7 = \",jaccard_score(result_c[1],result_c[6],average=\"weighted\")*100)\n","print(\"Similarity Between 2 and 8 = \",jaccard_score(result_c[1],result_c[7],average=\"weighted\")*100)\n","print(\"Similarity Between 2 and 9 = \",jaccard_score(result_c[1],result_c[8],average=\"weighted\")*100)\n","print(\"Similarity Between 2 and 10 = \",jaccard_score(result_c[1],result_c[9],average=\"weighted\")*100)\n","print()\n","# 3 to 10\n","print(\"Similarity Between 3 and 1 = \",jaccard_score(result_c[2],result_c[0],average=\"weighted\")*100)\n","print(\"Similarity Between 3 and 2 = \",jaccard_score(result_c[2],result_c[1],average=\"weighted\")*100)\n","print(\"Similarity Between 3 and 3 = \",jaccard_score(result_c[2],result_c[2],average=\"weighted\")*100)\n","print(\"Similarity Between 3 and 4 = \",jaccard_score(result_c[2],result_c[3],average=\"weighted\")*100)\n","print(\"Similarity Between 3 and 5 = \",jaccard_score(result_c[2],result_c[4],average=\"weighted\")*100)\n","print(\"Similarity Between 3 and 6 = \",jaccard_score(result_c[2],result_c[5],average=\"weighted\")*100)\n","print(\"Similarity Between 3 and 7 = \",jaccard_score(result_c[2],result_c[6],average=\"weighted\")*100)\n","print(\"Similarity Between 3 and 8 = \",jaccard_score(result_c[2],result_c[7],average=\"weighted\")*100)\n","print(\"Similarity Between 3 and 9 = \",jaccard_score(result_c[2],result_c[8],average=\"weighted\")*100)\n","print(\"Similarity Between 3 and 10 = \",jaccard_score(result_c[2],result_c[9],average=\"weighted\")*100)\n","print()\n","#4 to 10\n","print(\"Similarity Between 4 and 1 = \",jaccard_score(result_c[3],result_c[0],average=\"weighted\")*100)\n","print(\"Similarity Between 4 and 2 = \",jaccard_score(result_c[3],result_c[1],average=\"weighted\")*100)\n","print(\"Similarity Between 4 and 3 = \",jaccard_score(result_c[3],result_c[2],average=\"weighted\")*100)\n","print(\"Similarity Between 4 and 4 = \",jaccard_score(result_c[3],result_c[3],average=\"weighted\")*100)\n","print(\"Similarity Between 4 and 5 = \",jaccard_score(result_c[3],result_c[4],average=\"weighted\")*100)\n","print(\"Similarity Between 4 and 6 = \",jaccard_score(result_c[3],result_c[5],average=\"weighted\")*100)\n","print(\"Similarity Between 4 and 7 = \",jaccard_score(result_c[3],result_c[6],average=\"weighted\")*100)\n","print(\"Similarity Between 4 and 8 = \",jaccard_score(result_c[3],result_c[7],average=\"weighted\")*100)\n","print(\"Similarity Between 4 and 9 = \",jaccard_score(result_c[3],result_c[8],average=\"weighted\")*100)\n","print(\"Similarity Between 4 and 10 = \",jaccard_score(result_c[3],result_c[9],average=\"weighted\")*100)\n","print()\n","# 5 to 10\n","print(\"Similarity Between 5 and 1 = \",jaccard_score(result_c[4],result_c[0],average=\"weighted\")*100)\n","print(\"Similarity Between 5 and 2 = \",jaccard_score(result_c[4],result_c[1],average=\"weighted\")*100)\n","print(\"Similarity Between 5 and 3 = \",jaccard_score(result_c[4],result_c[2],average=\"weighted\")*100)\n","print(\"Similarity Between 5 and 4 = \",jaccard_score(result_c[4],result_c[3],average=\"weighted\")*100)\n","print(\"Similarity Between 5 and 5 = \",jaccard_score(result_c[4],result_c[4],average=\"weighted\")*100)\n","print(\"Similarity Between 5 and 6 = \",jaccard_score(result_c[4],result_c[5],average=\"weighted\")*100)\n","print(\"Similarity Between 5 and 7 = \",jaccard_score(result_c[4],result_c[6],average=\"weighted\")*100)\n","print(\"Similarity Between 5 and 8 = \",jaccard_score(result_c[4],result_c[7],average=\"weighted\")*100)\n","print(\"Similarity Between 5 and 9 = \",jaccard_score(result_c[4],result_c[8],average=\"weighted\")*100)\n","print(\"Similarity Between 5 and 10 = \",jaccard_score(result_c[4],result_c[9],average=\"weighted\")*100)\n","print()\n","# 6 to 10\n","print(\"Similarity Between 6 and 1 = \",jaccard_score(result_c[5],result_c[0],average=\"weighted\")*100)\n","print(\"Similarity Between 6 and 2 = \",jaccard_score(result_c[5],result_c[1],average=\"weighted\")*100)\n","print(\"Similarity Between 6 and 3 = \",jaccard_score(result_c[5],result_c[2],average=\"weighted\")*100)\n","print(\"Similarity Between 6 and 4 = \",jaccard_score(result_c[5],result_c[3],average=\"weighted\")*100)\n","print(\"Similarity Between 6 and 5 = \",jaccard_score(result_c[5],result_c[4],average=\"weighted\")*100)\n","print(\"Similarity Between 6 and 6 = \",jaccard_score(result_c[5],result_c[5],average=\"weighted\")*100)\n","print(\"Similarity Between 6 and 7 = \",jaccard_score(result_c[5],result_c[6],average=\"weighted\")*100)\n","print(\"Similarity Between 6 and 8 = \",jaccard_score(result_c[5],result_c[7],average=\"weighted\")*100)\n","print(\"Similarity Between 6 and 9 = \",jaccard_score(result_c[5],result_c[8],average=\"weighted\")*100)\n","print(\"Similarity Between 6 and 10 = \",jaccard_score(result_c[5],result_c[9],average=\"weighted\")*100)\n","print()\n","# 7 to 10\n","print(\"Similarity Between 7 and 1 = \",jaccard_score(result_c[6],result_c[0],average=\"weighted\")*100)\n","print(\"Similarity Between 7 and 2 = \",jaccard_score(result_c[6],result_c[1],average=\"weighted\")*100)\n","print(\"Similarity Between 7 and 3 = \",jaccard_score(result_c[6],result_c[2],average=\"weighted\")*100)\n","print(\"Similarity Between 7 and 4 = \",jaccard_score(result_c[6],result_c[3],average=\"weighted\")*100)\n","print(\"Similarity Between 7 and 5 = \",jaccard_score(result_c[6],result_c[4],average=\"weighted\")*100)\n","print(\"Similarity Between 7 and 6 = \",jaccard_score(result_c[6],result_c[5],average=\"weighted\")*100)\n","print(\"Similarity Between 7 and 7 = \",jaccard_score(result_c[6],result_c[6],average=\"weighted\")*100)\n","print(\"Similarity Between 7 and 8 = \",jaccard_score(result_c[6],result_c[7],average=\"weighted\")*100)\n","print(\"Similarity Between 7 and 9 = \",jaccard_score(result_c[6],result_c[8],average=\"weighted\")*100)\n","print(\"Similarity Between 7 and 10 = \",jaccard_score(result_c[6],result_c[9],average=\"weighted\")*100)\n","print()\n","# 8 to 10\n","print(\"Similarity Between 8 and 1 = \",jaccard_score(result_c[7],result_c[0],average=\"weighted\")*100)\n","print(\"Similarity Between 8 and 2 = \",jaccard_score(result_c[7],result_c[1],average=\"weighted\")*100)\n","print(\"Similarity Between 8 and 3 = \",jaccard_score(result_c[7],result_c[2],average=\"weighted\")*100)\n","print(\"Similarity Between 8 and 4 = \",jaccard_score(result_c[7],result_c[3],average=\"weighted\")*100)\n","print(\"Similarity Between 8 and 5 = \",jaccard_score(result_c[7],result_c[4],average=\"weighted\")*100)\n","print(\"Similarity Between 8 and 6 = \",jaccard_score(result_c[7],result_c[5],average=\"weighted\")*100)\n","print(\"Similarity Between 8 and 7 = \",jaccard_score(result_c[7],result_c[6],average=\"weighted\")*100)\n","print(\"Similarity Between 8 and 8 = \",jaccard_score(result_c[7],result_c[7],average=\"weighted\")*100)\n","print(\"Similarity Between 8 and 9 = \",jaccard_score(result_c[7],result_c[8],average=\"weighted\")*100)\n","print(\"Similarity Between 8 and 10 = \",jaccard_score(result_c[7],result_c[9],average=\"weighted\")*100)\n","print()\n","#etc\n","print(\"Similarity Between 9 and 10 = \",jaccard_score(result_c[8],result_c[9],average=\"weighted\")*100)\n","\n","\n"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","Similarity Between 1 and 1 =  100.0\n","Similarity Between 1 and 2 =  67.18608015721539\n","Similarity Between 1 and 3 =  68.79649750084874\n","Similarity Between 1 and 4 =  73.63509003667512\n","Similarity Between 1 and 5 =  72.30534300694251\n","Similarity Between 1 and 6 =  71.86343324004694\n","Similarity Between 1 and 7 =  69.45450210718333\n","Similarity Between 1 and 8 =  68.49330279965979\n","Similarity Between 1 and 9 =  70.71193767730895\n","Similarity Between 1 and 10 =  73.0753798736815\n","\n","Similarity Between 2 and 1 =  61.08962523944287\n","Similarity Between 2 and 2 =  100.0\n","Similarity Between 2 and 3 =  56.92810613683206\n","Similarity Between 2 and 4 =  61.24759347047083\n","Similarity Between 2 and 5 =  58.87742636079815\n","Similarity Between 2 and 6 =  59.569728535068975\n","Similarity Between 2 and 7 =  58.076803777912964\n","Similarity Between 2 and 8 =  57.037898202734524\n","Similarity Between 2 and 9 =  58.153026020989444\n","Similarity Between 2 and 10 =  59.65399459449713\n","\n","Similarity Between 3 and 1 =  63.500089641396265\n","Similarity Between 3 and 2 =  57.850728265958\n","Similarity Between 3 and 3 =  100.0\n","Similarity Between 3 and 4 =  61.958036325305365\n","Similarity Between 3 and 5 =  61.71885245991222\n","Similarity Between 3 and 6 =  61.41781567489114\n","Similarity Between 3 and 7 =  59.51796655688132\n","Similarity Between 3 and 8 =  57.79879011172997\n","Similarity Between 3 and 9 =  60.455785861151426\n","Similarity Between 3 and 10 =  59.72191099359117\n","\n","Similarity Between 4 and 1 =  72.48342614691063\n","Similarity Between 4 and 2 =  66.15627013622296\n","Similarity Between 4 and 3 =  66.07304700903218\n","Similarity Between 4 and 4 =  100.0\n","Similarity Between 4 and 5 =  70.49776913497914\n","Similarity Between 4 and 6 =  69.06272243855462\n","Similarity Between 4 and 7 =  66.16078048064412\n","Similarity Between 4 and 8 =  65.63309693064045\n","Similarity Between 4 and 9 =  68.19238544474393\n","Similarity Between 4 and 10 =  69.44462682670229\n","\n","Similarity Between 5 and 1 =  70.03208108114404\n","Similarity Between 5 and 2 =  62.779964707479294\n","Similarity Between 5 and 3 =  64.60385719219404\n","Similarity Between 5 and 4 =  69.17075855312468\n","Similarity Between 5 and 5 =  100.0\n","Similarity Between 5 and 6 =  66.97090951574275\n","Similarity Between 5 and 7 =  66.47902871120013\n","Similarity Between 5 and 8 =  63.54789948202513\n","Similarity Between 5 and 9 =  66.70673076923077\n","Similarity Between 5 and 10 =  68.77033387541458\n","\n","Similarity Between 6 and 1 =  68.98415636002527\n","Similarity Between 6 and 2 =  62.96029348351948\n","Similarity Between 6 and 3 =  63.665638606676346\n","Similarity Between 6 and 4 =  67.28299674750889\n","Similarity Between 6 and 5 =  66.42053420176413\n","Similarity Between 6 and 6 =  100.0\n","Similarity Between 6 and 7 =  62.91008090542021\n","Similarity Between 6 and 8 =  64.8065808131469\n","Similarity Between 6 and 9 =  64.69543585885744\n","Similarity Between 6 and 10 =  64.9688522386053\n","\n","Similarity Between 7 and 1 =  64.63168713665239\n","Similarity Between 7 and 2 =  59.323981524005085\n","Similarity Between 7 and 3 =  59.93145905253308\n","Similarity Between 7 and 4 =  62.44667215098592\n","Similarity Between 7 and 5 =  64.02443748742118\n","Similarity Between 7 and 6 =  61.04665946173129\n","Similarity Between 7 and 7 =  100.0\n","Similarity Between 7 and 8 =  57.62848590089157\n","Similarity Between 7 and 9 =  63.388615630799904\n","Similarity Between 7 and 10 =  64.12109297373873\n","\n","Similarity Between 8 and 1 =  62.30020101482289\n","Similarity Between 8 and 2 =  56.695762430139304\n","Similarity Between 8 and 3 =  56.61505822876231\n","Similarity Between 8 and 4 =  60.36060566957625\n","Similarity Between 8 and 5 =  59.58880163511188\n","Similarity Between 8 and 6 =  61.382571213222505\n","Similarity Between 8 and 7 =  55.87703128239685\n","Similarity Between 8 and 8 =  100.0\n","Similarity Between 8 and 9 =  57.41181776106734\n","Similarity Between 8 and 10 =  58.61044836119493\n","\n","Similarity Between 9 and 10 =  65.6434282324814\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function get_feature_names is deprecated; get_feature_names is deprecated in 1.0 and will be removed in 1.2. Please use get_feature_names_out instead.\n","  warnings.warn(msg, category=FutureWarning)\n"]}]},{"cell_type":"markdown","metadata":{"id":"tiy-IJ9N0zvT"},"source":["Calculating Similarity : Euclidean Distances"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YrZcd6Afu0KC","executionInfo":{"status":"ok","timestamp":1638191529499,"user_tz":-420,"elapsed":540,"user":{"displayName":"M Daffa Gashandy","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh7g2wCDoJ_7gn_JKav-6ZXlei2Tjvfv2y9NFCe=s64","userId":"08879571958020624525"}},"outputId":"4cf727f5-44d5-41bc-a819-33132a0a7dc3"},"source":["from sklearn.metrics.pairwise import euclidean_distances\n","\n","vectorizer = CountVectorizer()\n","X = vectorizer.fit_transform([d1,d2,d3,d4,d5,d6,d7,d8,d9,d10])\n","feature_names_c = vectorizer.get_feature_names()\n","result_c = X.toarray()\n","length = len(feature_names_c)\n","print()\n","\n","#comparison between abstract\n","\n","# 1 to 10\n","print(\"Similarity Between 1 and 1 = \",100-(euclidean_distances(result_c[0].reshape(1,-1),result_c[0].reshape(1,-1))))\n","print(\"Similarity Between 1 and 2 = \",100-(euclidean_distances(result_c[0].reshape(1,-1),result_c[1].reshape(1,-1))))\n","print(\"Similarity Between 1 and 3 = \",100-(euclidean_distances(result_c[0].reshape(1,-1),result_c[2].reshape(1,-1))))\n","print(\"Similarity Between 1 and 4 = \",100-(euclidean_distances(result_c[0].reshape(1,-1),result_c[3].reshape(1,-1))))\n","print(\"Similarity Between 1 and 5 = \",100-(euclidean_distances(result_c[0].reshape(1,-1),result_c[4].reshape(1,-1))))\n","print(\"Similarity Between 1 and 6 = \",100-(euclidean_distances(result_c[0].reshape(1,-1),result_c[5].reshape(1,-1))))\n","print(\"Similarity Between 1 and 7 = \",100-(euclidean_distances(result_c[0].reshape(1,-1),result_c[6].reshape(1,-1))))\n","print(\"Similarity Between 1 and 8 = \",100-(euclidean_distances(result_c[0].reshape(1,-1),result_c[7].reshape(1,-1))))\n","print(\"Similarity Between 1 and 9 = \",100-(euclidean_distances(result_c[0].reshape(1,-1),result_c[8].reshape(1,-1))))\n","print(\"Similarity Between 1 and 10 = \",100-(euclidean_distances(result_c[0].reshape(1,-1),result_c[9].reshape(1,-1))))\n","print()\n","# 2 to 10\n","print(\"Similarity Between 2 and 1 = \",100-(euclidean_distances(result_c[1].reshape(1,-1),result_c[0].reshape(1,-1))))\n","print(\"Similarity Between 2 and 2 = \",100-(euclidean_distances(result_c[1].reshape(1,-1),result_c[1].reshape(1,-1))))\n","print(\"Similarity Between 2 and 3 = \",100-(euclidean_distances(result_c[1].reshape(1,-1),result_c[2].reshape(1,-1))))\n","print(\"Similarity Between 2 and 4 = \",100-(euclidean_distances(result_c[1].reshape(1,-1),result_c[3].reshape(1,-1))))\n","print(\"Similarity Between 2 and 5 = \",100-(euclidean_distances(result_c[1].reshape(1,-1),result_c[4].reshape(1,-1))))\n","print(\"Similarity Between 2 and 6 = \",100-(euclidean_distances(result_c[1].reshape(1,-1),result_c[5].reshape(1,-1))))\n","print(\"Similarity Between 2 and 7 = \",100-(euclidean_distances(result_c[1].reshape(1,-1),result_c[6].reshape(1,-1))))\n","print(\"Similarity Between 2 and 8 = \",100-(euclidean_distances(result_c[1].reshape(1,-1),result_c[7].reshape(1,-1))))\n","print(\"Similarity Between 2 and 9 = \",100-(euclidean_distances(result_c[1].reshape(1,-1),result_c[8].reshape(1,-1))))\n","print(\"Similarity Between 2 and 10 = \",100-(euclidean_distances(result_c[1].reshape(1,-1),result_c[9].reshape(1,-1))))\n","print()\n","# 3 to 10\n","print(\"Similarity Between 3 and 1 = \",100-(euclidean_distances(result_c[2].reshape(1,-1),result_c[0].reshape(1,-1))))\n","print(\"Similarity Between 3 and 2 = \",100-(euclidean_distances(result_c[2].reshape(1,-1),result_c[1].reshape(1,-1))))\n","print(\"Similarity Between 3 and 3 = \",100-(euclidean_distances(result_c[2].reshape(1,-1),result_c[2].reshape(1,-1))))\n","print(\"Similarity Between 3 and 4 = \",100-(euclidean_distances(result_c[2].reshape(1,-1),result_c[3].reshape(1,-1))))\n","print(\"Similarity Between 3 and 5 = \",100-(euclidean_distances(result_c[2].reshape(1,-1),result_c[4].reshape(1,-1))))\n","print(\"Similarity Between 3 and 6 = \",100-(euclidean_distances(result_c[2].reshape(1,-1),result_c[5].reshape(1,-1))))\n","print(\"Similarity Between 3 and 7 = \",100-(euclidean_distances(result_c[2].reshape(1,-1),result_c[6].reshape(1,-1))))\n","print(\"Similarity Between 3 and 8 = \",100-(euclidean_distances(result_c[2].reshape(1,-1),result_c[7].reshape(1,-1))))\n","print(\"Similarity Between 3 and 9 = \",100-(euclidean_distances(result_c[2].reshape(1,-1),result_c[8].reshape(1,-1))))\n","print(\"Similarity Between 3 and 10 = \",100-(euclidean_distances(result_c[2].reshape(1,-1),result_c[9].reshape(1,-1))))\n","print()\n","# 4 to 10\n","print(\"Similarity Between 4 and 1 = \",100-(euclidean_distances(result_c[3].reshape(1,-1),result_c[0].reshape(1,-1))))\n","print(\"Similarity Between 4 and 2 = \",100-(euclidean_distances(result_c[3].reshape(1,-1),result_c[1].reshape(1,-1))))\n","print(\"Similarity Between 4 and 3 = \",100-(euclidean_distances(result_c[3].reshape(1,-1),result_c[2].reshape(1,-1))))\n","print(\"Similarity Between 4 and 4 = \",100-(euclidean_distances(result_c[3].reshape(1,-1),result_c[3].reshape(1,-1))))\n","print(\"Similarity Between 4 and 5 = \",100-(euclidean_distances(result_c[3].reshape(1,-1),result_c[4].reshape(1,-1))))\n","print(\"Similarity Between 4 and 6 = \",100-(euclidean_distances(result_c[3].reshape(1,-1),result_c[5].reshape(1,-1))))\n","print(\"Similarity Between 4 and 7 = \",100-(euclidean_distances(result_c[3].reshape(1,-1),result_c[6].reshape(1,-1))))\n","print(\"Similarity Between 4 and 8 = \",100-(euclidean_distances(result_c[3].reshape(1,-1),result_c[7].reshape(1,-1))))\n","print(\"Similarity Between 4 and 9 = \",100-(euclidean_distances(result_c[3].reshape(1,-1),result_c[8].reshape(1,-1))))\n","print(\"Similarity Between 4 and 10 = \",100-(euclidean_distances(result_c[3].reshape(1,-1),result_c[9].reshape(1,-1))))\n","print()\n","# 5 to 10\n","print(\"Similarity Between 5 and 1 = \",100-(euclidean_distances(result_c[4].reshape(1,-1),result_c[0].reshape(1,-1))))\n","print(\"Similarity Between 5 and 2 = \",100-(euclidean_distances(result_c[4].reshape(1,-1),result_c[1].reshape(1,-1))))\n","print(\"Similarity Between 5 and 3 = \",100-(euclidean_distances(result_c[4].reshape(1,-1),result_c[2].reshape(1,-1))))\n","print(\"Similarity Between 5 and 4 = \",100-(euclidean_distances(result_c[4].reshape(1,-1),result_c[3].reshape(1,-1))))\n","print(\"Similarity Between 5 and 5 = \",100-(euclidean_distances(result_c[4].reshape(1,-1),result_c[4].reshape(1,-1))))\n","print(\"Similarity Between 5 and 6 = \",100-(euclidean_distances(result_c[4].reshape(1,-1),result_c[5].reshape(1,-1))))\n","print(\"Similarity Between 5 and 7 = \",100-(euclidean_distances(result_c[4].reshape(1,-1),result_c[6].reshape(1,-1))))\n","print(\"Similarity Between 5 and 8 = \",100-(euclidean_distances(result_c[4].reshape(1,-1),result_c[7].reshape(1,-1))))\n","print(\"Similarity Between 5 and 9 = \",100-(euclidean_distances(result_c[4].reshape(1,-1),result_c[8].reshape(1,-1))))\n","print(\"Similarity Between 5 and 10 = \",100-(euclidean_distances(result_c[4].reshape(1,-1),result_c[9].reshape(1,-1))))\n","print()\n","# 6 to 10\n","print(\"Similarity Between 6 and 1 = \",100-(euclidean_distances(result_c[5].reshape(1,-1),result_c[0].reshape(1,-1))))\n","print(\"Similarity Between 6 and 2 = \",100-(euclidean_distances(result_c[5].reshape(1,-1),result_c[1].reshape(1,-1))))\n","print(\"Similarity Between 6 and 3 = \",100-(euclidean_distances(result_c[5].reshape(1,-1),result_c[2].reshape(1,-1))))\n","print(\"Similarity Between 6 and 4 = \",100-(euclidean_distances(result_c[5].reshape(1,-1),result_c[3].reshape(1,-1))))\n","print(\"Similarity Between 6 and 5 = \",100-(euclidean_distances(result_c[5].reshape(1,-1),result_c[4].reshape(1,-1))))\n","print(\"Similarity Between 6 and 6 = \",100-(euclidean_distances(result_c[5].reshape(1,-1),result_c[5].reshape(1,-1))))\n","print(\"Similarity Between 6 and 7 = \",100-(euclidean_distances(result_c[5].reshape(1,-1),result_c[6].reshape(1,-1))))\n","print(\"Similarity Between 6 and 8 = \",100-(euclidean_distances(result_c[5].reshape(1,-1),result_c[7].reshape(1,-1))))\n","print(\"Similarity Between 6 and 9 = \",100-(euclidean_distances(result_c[5].reshape(1,-1),result_c[8].reshape(1,-1))))\n","print(\"Similarity Between 6 and 10 = \",100-(euclidean_distances(result_c[5].reshape(1,-1),result_c[9].reshape(1,-1))))\n","print()\n","# 7 to 10\n","print(\"Similarity Between 7 and 1 = \",100-(euclidean_distances(result_c[6].reshape(1,-1),result_c[0].reshape(1,-1))))\n","print(\"Similarity Between 7 and 2 = \",100-(euclidean_distances(result_c[6].reshape(1,-1),result_c[1].reshape(1,-1))))\n","print(\"Similarity Between 7 and 3 = \",100-(euclidean_distances(result_c[6].reshape(1,-1),result_c[2].reshape(1,-1))))\n","print(\"Similarity Between 7 and 4 = \",100-(euclidean_distances(result_c[6].reshape(1,-1),result_c[3].reshape(1,-1))))\n","print(\"Similarity Between 7 and 5 = \",100-(euclidean_distances(result_c[6].reshape(1,-1),result_c[4].reshape(1,-1))))\n","print(\"Similarity Between 7 and 6 = \",100-(euclidean_distances(result_c[6].reshape(1,-1),result_c[5].reshape(1,-1))))\n","print(\"Similarity Between 7 and 7 = \",100-(euclidean_distances(result_c[6].reshape(1,-1),result_c[6].reshape(1,-1))))\n","print(\"Similarity Between 7 and 8 = \",100-(euclidean_distances(result_c[6].reshape(1,-1),result_c[7].reshape(1,-1))))\n","print(\"Similarity Between 7 and 9 = \",100-(euclidean_distances(result_c[6].reshape(1,-1),result_c[8].reshape(1,-1))))\n","print(\"Similarity Between 7 and 10 = \",100-(euclidean_distances(result_c[6].reshape(1,-1),result_c[9].reshape(1,-1))))\n","print()\n","# 8 to 10\n","print(\"Similarity Between 8 and 1 = \",100-(euclidean_distances(result_c[7].reshape(1,-1),result_c[0].reshape(1,-1))))\n","print(\"Similarity Between 8 and 2 = \",100-(euclidean_distances(result_c[7].reshape(1,-1),result_c[1].reshape(1,-1))))\n","print(\"Similarity Between 8 and 3 = \",100-(euclidean_distances(result_c[7].reshape(1,-1),result_c[2].reshape(1,-1))))\n","print(\"Similarity Between 8 and 4 = \",100-(euclidean_distances(result_c[7].reshape(1,-1),result_c[3].reshape(1,-1))))\n","print(\"Similarity Between 8 and 5 = \",100-(euclidean_distances(result_c[7].reshape(1,-1),result_c[4].reshape(1,-1))))\n","print(\"Similarity Between 8 and 6 = \",100-(euclidean_distances(result_c[7].reshape(1,-1),result_c[5].reshape(1,-1))))\n","print(\"Similarity Between 8 and 7 = \",100-(euclidean_distances(result_c[7].reshape(1,-1),result_c[6].reshape(1,-1))))\n","print(\"Similarity Between 8 and 8 = \",100-(euclidean_distances(result_c[7].reshape(1,-1),result_c[7].reshape(1,-1))))\n","print(\"Similarity Between 8 and 9 = \",100-(euclidean_distances(result_c[7].reshape(1,-1),result_c[8].reshape(1,-1))))\n","print(\"Similarity Between 8 and 10 = \",100-(euclidean_distances(result_c[7].reshape(1,-1),result_c[9].reshape(1,-1))))\n","print()\n","# 9 to 10 \n","print(\"Similarity Between 9 and 10 = \",100-(euclidean_distances(result_c[8].reshape(1,-1),result_c[9].reshape(1,-1))))\n"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","Similarity Between 1 and 1 =  [[100.]]\n","Similarity Between 1 and 2 =  [[72.83384459]]\n","Similarity Between 1 and 3 =  [[70.36893522]]\n","Similarity Between 1 and 4 =  [[68.10956256]]\n","Similarity Between 1 and 5 =  [[72.]]\n","Similarity Between 1 and 6 =  [[70.70836297]]\n","Similarity Between 1 and 7 =  [[61.49026097]]\n","Similarity Between 1 and 8 =  [[73.33541675]]\n","Similarity Between 1 and 9 =  [[69.5533253]]\n","Similarity Between 1 and 10 =  [[69.91678209]]\n","\n","Similarity Between 2 and 1 =  [[72.83384459]]\n","Similarity Between 2 and 2 =  [[100.]]\n","Similarity Between 2 and 3 =  [[78.13678889]]\n","Similarity Between 2 and 4 =  [[75.85460706]]\n","Similarity Between 2 and 5 =  [[80.81667391]]\n","Similarity Between 2 and 6 =  [[79.26355865]]\n","Similarity Between 2 and 7 =  [[67.06066182]]\n","Similarity Between 2 and 8 =  [[81.75171241]]\n","Similarity Between 2 and 9 =  [[77.]]\n","Similarity Between 2 and 10 =  [[77.61697071]]\n","\n","Similarity Between 3 and 1 =  [[70.36893522]]\n","Similarity Between 3 and 2 =  [[78.13678889]]\n","Similarity Between 3 and 3 =  [[100.]]\n","Similarity Between 3 and 4 =  [[72.48636702]]\n","Similarity Between 3 and 5 =  [[77.81892699]]\n","Similarity Between 3 and 6 =  [[74.46570933]]\n","Similarity Between 3 and 7 =  [[65.95591094]]\n","Similarity Between 3 and 8 =  [[77.61697071]]\n","Similarity Between 3 and 9 =  [[76.23027135]]\n","Similarity Between 3 and 10 =  [[73.44816391]]\n","\n","Similarity Between 4 and 1 =  [[68.10956256]]\n","Similarity Between 4 and 2 =  [[75.85460706]]\n","Similarity Between 4 and 3 =  [[72.48636702]]\n","Similarity Between 4 and 4 =  [[100.]]\n","Similarity Between 4 and 5 =  [[76.35681916]]\n","Similarity Between 4 and 6 =  [[72.48636702]]\n","Similarity Between 4 and 7 =  [[62.42341154]]\n","Similarity Between 4 and 8 =  [[74.9001992]]\n","Similarity Between 4 and 9 =  [[72.10734864]]\n","Similarity Between 4 and 10 =  [[71.64510624]]\n","\n","Similarity Between 5 and 1 =  [[72.]]\n","Similarity Between 5 and 2 =  [[80.81667391]]\n","Similarity Between 5 and 3 =  [[77.81892699]]\n","Similarity Between 5 and 4 =  [[76.35681916]]\n","Similarity Between 5 and 5 =  [[100.]]\n","Similarity Between 5 and 6 =  [[77.41682042]]\n","Similarity Between 5 and 7 =  [[66.39940477]]\n","Similarity Between 5 and 8 =  [[80.1757724]]\n","Similarity Between 5 and 9 =  [[76.6976396]]\n","Similarity Between 5 and 10 =  [[76.86993299]]\n","\n","Similarity Between 6 and 1 =  [[70.70836297]]\n","Similarity Between 6 and 2 =  [[79.26355865]]\n","Similarity Between 6 and 3 =  [[74.46570933]]\n","Similarity Between 6 and 4 =  [[72.48636702]]\n","Similarity Between 6 and 5 =  [[77.41682042]]\n","Similarity Between 6 and 6 =  [[100.]]\n","Similarity Between 6 and 7 =  [[64.5458042]]\n","Similarity Between 6 and 8 =  [[78.34359217]]\n","Similarity Between 6 and 9 =  [[73.71312114]]\n","Similarity Between 6 and 10 =  [[74.01923789]]\n","\n","Similarity Between 7 and 1 =  [[61.49026097]]\n","Similarity Between 7 and 2 =  [[67.06066182]]\n","Similarity Between 7 and 3 =  [[65.95591094]]\n","Similarity Between 7 and 4 =  [[62.42341154]]\n","Similarity Between 7 and 5 =  [[66.39940477]]\n","Similarity Between 7 and 6 =  [[64.5458042]]\n","Similarity Between 7 and 7 =  [[100.]]\n","Similarity Between 7 and 8 =  [[66.56349301]]\n","Similarity Between 7 and 9 =  [[67.65807674]]\n","Similarity Between 7 and 10 =  [[64.36294064]]\n","\n","Similarity Between 8 and 1 =  [[73.33541675]]\n","Similarity Between 8 and 2 =  [[81.75171241]]\n","Similarity Between 8 and 3 =  [[77.61697071]]\n","Similarity Between 8 and 4 =  [[74.9001992]]\n","Similarity Between 8 and 5 =  [[80.1757724]]\n","Similarity Between 8 and 6 =  [[78.34359217]]\n","Similarity Between 8 and 7 =  [[66.56349301]]\n","Similarity Between 8 and 8 =  [[100.]]\n","Similarity Between 8 and 9 =  [[76.46279541]]\n","Similarity Between 8 and 10 =  [[76.5479212]]\n","\n","Similarity Between 9 and 10 =  [[73.20447799]]\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function get_feature_names is deprecated; get_feature_names is deprecated in 1.0 and will be removed in 1.2. Please use get_feature_names_out instead.\n","  warnings.warn(msg, category=FutureWarning)\n"]}]}]}